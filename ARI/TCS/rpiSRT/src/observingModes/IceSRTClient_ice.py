# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `IceSRTClient.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__

# Start of module SRTClient
_M_SRTClient = Ice.openModule('SRTClient')
__name__ = 'SRTClient'

if not _M_SRTClient.__dict__.has_key('Client'):
    _M_SRTClient.Client = Ice.createTempClass()
    class Client(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_SRTClient.Client:
                raise RuntimeError('SRTClient.Client is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SRTClient::Client')

        def ice_id(self, current=None):
            return '::SRTClient::Client'

        def ice_staticId():
            return '::SRTClient::Client'
        ice_staticId = staticmethod(ice_staticId)

        def message(self, s, current=None):
            pass

        def setup(self, current=None):
            pass

        def tracking(self, s, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_SRTClient._t_Client)

        __repr__ = __str__

    _M_SRTClient.ClientPrx = Ice.createTempClass()
    class ClientPrx(Ice.ObjectPrx):

        def message(self, s, _ctx=None):
            return _M_SRTClient.Client._op_message.invoke(self, ((s, ), _ctx))

        def begin_message(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTClient.Client._op_message.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_message(self, _r):
            return _M_SRTClient.Client._op_message.end(self, _r)

        def setup(self, _ctx=None):
            return _M_SRTClient.Client._op_setup.invoke(self, ((), _ctx))

        def begin_setup(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTClient.Client._op_setup.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_setup(self, _r):
            return _M_SRTClient.Client._op_setup.end(self, _r)

        def tracking(self, s, _ctx=None):
            return _M_SRTClient.Client._op_tracking.invoke(self, ((s, ), _ctx))

        def begin_tracking(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTClient.Client._op_tracking.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_tracking(self, _r):
            return _M_SRTClient.Client._op_tracking.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_SRTClient.ClientPrx.ice_checkedCast(proxy, '::SRTClient::Client', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_SRTClient.ClientPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_SRTClient._t_ClientPrx = IcePy.defineProxy('::SRTClient::Client', ClientPrx)

    _M_SRTClient._t_Client = IcePy.defineClass('::SRTClient::Client', Client, (), True, None, (), ())
    Client._ice_type = _M_SRTClient._t_Client

    Client._op_message = IcePy.Operation('message', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (((), IcePy._t_string),), None, ())
    Client._op_setup = IcePy.Operation('setup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), IcePy._t_string),), None, ())
    Client._op_tracking = IcePy.Operation('tracking', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (((), IcePy._t_string),), None, ())

    _M_SRTClient.Client = Client
    del Client

    _M_SRTClient.ClientPrx = ClientPrx
    del ClientPrx

# End of module SRTClient
