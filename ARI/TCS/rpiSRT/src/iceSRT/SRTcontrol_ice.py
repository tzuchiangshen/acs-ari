# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `SRTcontrol.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__

# Start of module SRTControl
_M_SRTControl = Ice.openModule('SRTControl')
__name__ = 'SRTControl'

if not _M_SRTControl.__dict__.has_key('_t_ports'):
    _M_SRTControl._t_ports = IcePy.defineSequence('::SRTControl::ports', (), IcePy._t_string)

if not _M_SRTControl.__dict__.has_key('AntennaStatus'):
    _M_SRTControl.AntennaStatus = Ice.createTempClass()
    class AntennaStatus(object):
        def __init__(self, az=0.0, el=0.0, aznow=0.0, elnow=0.0, axis=0, tostow=0, elatstow=0, azatstow=0, slew=0, serialport='', lastSRTCom='', lastSerialMsg=''):
            self.az = az
            self.el = el
            self.aznow = aznow
            self.elnow = elnow
            self.axis = axis
            self.tostow = tostow
            self.elatstow = elatstow
            self.azatstow = azatstow
            self.slew = slew
            self.serialport = serialport
            self.lastSRTCom = lastSRTCom
            self.lastSerialMsg = lastSerialMsg

        def __hash__(self):
            _h = 0
            _h = 5 * _h + __builtin__.hash(self.az)
            _h = 5 * _h + __builtin__.hash(self.el)
            _h = 5 * _h + __builtin__.hash(self.aznow)
            _h = 5 * _h + __builtin__.hash(self.elnow)
            _h = 5 * _h + __builtin__.hash(self.axis)
            _h = 5 * _h + __builtin__.hash(self.tostow)
            _h = 5 * _h + __builtin__.hash(self.elatstow)
            _h = 5 * _h + __builtin__.hash(self.azatstow)
            _h = 5 * _h + __builtin__.hash(self.slew)
            _h = 5 * _h + __builtin__.hash(self.serialport)
            _h = 5 * _h + __builtin__.hash(self.lastSRTCom)
            _h = 5 * _h + __builtin__.hash(self.lastSerialMsg)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_SRTControl.AntennaStatus):
                return self.az < other.az or self.el < other.el or self.aznow < other.aznow or self.elnow < other.elnow or self.axis < other.axis or self.tostow < other.tostow or self.elatstow < other.elatstow or self.azatstow < other.azatstow or self.slew < other.slew or self.serialport < other.serialport or self.lastSRTCom < other.lastSRTCom or self.lastSerialMsg < other.lastSerialMsg
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_SRTControl.AntennaStatus):
                return self.az <= other.az or self.el <= other.el or self.aznow <= other.aznow or self.elnow <= other.elnow or self.axis <= other.axis or self.tostow <= other.tostow or self.elatstow <= other.elatstow or self.azatstow <= other.azatstow or self.slew <= other.slew or self.serialport <= other.serialport or self.lastSRTCom <= other.lastSRTCom or self.lastSerialMsg <= other.lastSerialMsg
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_SRTControl.AntennaStatus):
                return self.az == other.az and self.el == other.el and self.aznow == other.aznow and self.elnow == other.elnow and self.axis == other.axis and self.tostow == other.tostow and self.elatstow == other.elatstow and self.azatstow == other.azatstow and self.slew == other.slew and self.serialport == other.serialport and self.lastSRTCom == other.lastSRTCom and self.lastSerialMsg == other.lastSerialMsg
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_SRTControl.AntennaStatus):
                return self.az != other.az or self.el != other.el or self.aznow != other.aznow or self.elnow != other.elnow or self.axis != other.axis or self.tostow != other.tostow or self.elatstow != other.elatstow or self.azatstow != other.azatstow or self.slew != other.slew or self.serialport != other.serialport or self.lastSRTCom != other.lastSRTCom or self.lastSerialMsg != other.lastSerialMsg
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_SRTControl.AntennaStatus):
                return self.az > other.az or self.el > other.el or self.aznow > other.aznow or self.elnow > other.elnow or self.axis > other.axis or self.tostow > other.tostow or self.elatstow > other.elatstow or self.azatstow > other.azatstow or self.slew > other.slew or self.serialport > other.serialport or self.lastSRTCom > other.lastSRTCom or self.lastSerialMsg > other.lastSerialMsg
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_SRTControl.AntennaStatus):
                return self.az >= other.az or self.el >= other.el or self.aznow >= other.aznow or self.elnow >= other.elnow or self.axis >= other.axis or self.tostow >= other.tostow or self.elatstow >= other.elatstow or self.azatstow >= other.azatstow or self.slew >= other.slew or self.serialport >= other.serialport or self.lastSRTCom >= other.lastSRTCom or self.lastSerialMsg >= other.lastSerialMsg
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_SRTControl._t_AntennaStatus)

        __repr__ = __str__

    _M_SRTControl._t_AntennaStatus = IcePy.defineStruct('::SRTControl::AntennaStatus', AntennaStatus, (), (
        ('az', (), IcePy._t_float),
        ('el', (), IcePy._t_float),
        ('aznow', (), IcePy._t_float),
        ('elnow', (), IcePy._t_float),
        ('axis', (), IcePy._t_int),
        ('tostow', (), IcePy._t_int),
        ('elatstow', (), IcePy._t_int),
        ('azatstow', (), IcePy._t_int),
        ('slew', (), IcePy._t_int),
        ('serialport', (), IcePy._t_string),
        ('lastSRTCom', (), IcePy._t_string),
        ('lastSerialMsg', (), IcePy._t_string)
    ))

    _M_SRTControl.AntennaStatus = AntennaStatus
    del AntennaStatus

if not _M_SRTControl.__dict__.has_key('telescope'):
    _M_SRTControl.telescope = Ice.createTempClass()
    class telescope(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_SRTControl.telescope:
                raise RuntimeError('SRTControl.telescope is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SRTControl::telescope')

        def ice_id(self, current=None):
            return '::SRTControl::telescope'

        def ice_staticId():
            return '::SRTControl::telescope'
        ice_staticId = staticmethod(ice_staticId)

        def message(self, s, current=None):
            pass

        def SRTGetSerialPorts(self, current=None):
            pass

        def SRTSetSerialPort(self, s, current=None):
            pass

        def SRTinit(self, s, current=None):
            pass

        def SRTStow(self, current=None):
            pass

        def SRTStatus(self, current=None):
            pass

        def SRTAzEl(self, az, el, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_SRTControl._t_telescope)

        __repr__ = __str__

    _M_SRTControl.telescopePrx = Ice.createTempClass()
    class telescopePrx(Ice.ObjectPrx):

        def message(self, s, _ctx=None):
            return _M_SRTControl.telescope._op_message.invoke(self, ((s, ), _ctx))

        def begin_message(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_message.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_message(self, _r):
            return _M_SRTControl.telescope._op_message.end(self, _r)

        def SRTGetSerialPorts(self, _ctx=None):
            return _M_SRTControl.telescope._op_SRTGetSerialPorts.invoke(self, ((), _ctx))

        def begin_SRTGetSerialPorts(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTGetSerialPorts.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_SRTGetSerialPorts(self, _r):
            return _M_SRTControl.telescope._op_SRTGetSerialPorts.end(self, _r)

        def SRTSetSerialPort(self, s, _ctx=None):
            return _M_SRTControl.telescope._op_SRTSetSerialPort.invoke(self, ((s, ), _ctx))

        def begin_SRTSetSerialPort(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTSetSerialPort.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_SRTSetSerialPort(self, _r):
            return _M_SRTControl.telescope._op_SRTSetSerialPort.end(self, _r)

        def SRTinit(self, s, _ctx=None):
            return _M_SRTControl.telescope._op_SRTinit.invoke(self, ((s, ), _ctx))

        def begin_SRTinit(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTinit.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_SRTinit(self, _r):
            return _M_SRTControl.telescope._op_SRTinit.end(self, _r)

        def SRTStow(self, _ctx=None):
            return _M_SRTControl.telescope._op_SRTStow.invoke(self, ((), _ctx))

        def begin_SRTStow(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTStow.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_SRTStow(self, _r):
            return _M_SRTControl.telescope._op_SRTStow.end(self, _r)

        def SRTStatus(self, _ctx=None):
            return _M_SRTControl.telescope._op_SRTStatus.invoke(self, ((), _ctx))

        def begin_SRTStatus(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTStatus.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_SRTStatus(self, _r):
            return _M_SRTControl.telescope._op_SRTStatus.end(self, _r)

        def SRTAzEl(self, az, el, _ctx=None):
            return _M_SRTControl.telescope._op_SRTAzEl.invoke(self, ((az, el), _ctx))

        def begin_SRTAzEl(self, az, el, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_SRTControl.telescope._op_SRTAzEl.begin(self, ((az, el), _response, _ex, _sent, _ctx))

        def end_SRTAzEl(self, _r):
            return _M_SRTControl.telescope._op_SRTAzEl.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_SRTControl.telescopePrx.ice_checkedCast(proxy, '::SRTControl::telescope', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_SRTControl.telescopePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_SRTControl._t_telescopePrx = IcePy.defineProxy('::SRTControl::telescope', telescopePrx)

    _M_SRTControl._t_telescope = IcePy.defineClass('::SRTControl::telescope', telescope, (), True, None, (), ())
    telescope._ice_type = _M_SRTControl._t_telescope

    telescope._op_message = IcePy.Operation('message', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (((), IcePy._t_string),), None, ())
    telescope._op_SRTGetSerialPorts = IcePy.Operation('SRTGetSerialPorts', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), _M_SRTControl._t_ports),), None, ())
    telescope._op_SRTSetSerialPort = IcePy.Operation('SRTSetSerialPort', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (((), IcePy._t_string),), None, ())
    telescope._op_SRTinit = IcePy.Operation('SRTinit', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (((), IcePy._t_string),), None, ())
    telescope._op_SRTStow = IcePy.Operation('SRTStow', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), IcePy._t_string),), None, ())
    telescope._op_SRTStatus = IcePy.Operation('SRTStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (((), _M_SRTControl._t_AntennaStatus),), None, ())
    telescope._op_SRTAzEl = IcePy.Operation('SRTAzEl', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_float), ((), IcePy._t_float)), (((), IcePy._t_string),), None, ())

    _M_SRTControl.telescope = telescope
    del telescope

    _M_SRTControl.telescopePrx = telescopePrx
    del telescopePrx

# End of module SRTControl
