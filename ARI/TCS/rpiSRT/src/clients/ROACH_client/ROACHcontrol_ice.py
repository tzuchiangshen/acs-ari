# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `ROACHcontrol.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module ROACHControl
_M_ROACHControl = Ice.openModule('ROACHControl')
__name__ = 'ROACHControl'

if 'ROACH' not in _M_ROACHControl.__dict__:
    _M_ROACHControl.ROACH = Ice.createTempClass()
    class ROACH(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_ROACHControl.ROACH:
                raise RuntimeError('ROACHControl.ROACH is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ROACHControl::ROACH')

        def ice_id(self, current=None):
            return '::ROACHControl::ROACH'

        def ice_staticId():
            return '::ROACHControl::ROACH'
        ice_staticId = staticmethod(ice_staticId)

        def message(self, s, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_ROACHControl._t_ROACH)

        __repr__ = __str__

    _M_ROACHControl.ROACHPrx = Ice.createTempClass()
    class ROACHPrx(Ice.ObjectPrx):

        def message(self, s, _ctx=None):
            return _M_ROACHControl.ROACH._op_message.invoke(self, ((s, ), _ctx))

        def begin_message(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ROACHControl.ROACH._op_message.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_message(self, _r):
            return _M_ROACHControl.ROACH._op_message.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_ROACHControl.ROACHPrx.ice_checkedCast(proxy, '::ROACHControl::ROACH', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_ROACHControl.ROACHPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_ROACHControl._t_ROACHPrx = IcePy.defineProxy('::ROACHControl::ROACH', ROACHPrx)

    _M_ROACHControl._t_ROACH = IcePy.defineClass('::ROACHControl::ROACH', ROACH, -1, (), True, False, None, (), ())
    ROACH._ice_type = _M_ROACHControl._t_ROACH

    ROACH._op_message = IcePy.Operation('message', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (((), IcePy._t_string, False, 0),), None, ())

    _M_ROACHControl.ROACH = ROACH
    del ROACH

    _M_ROACHControl.ROACHPrx = ROACHPrx
    del ROACHPrx

# End of module ROACHControl
